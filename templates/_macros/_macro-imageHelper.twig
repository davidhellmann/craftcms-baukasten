{#
Image Helper
------------------------------------------------------------

{% import '_macros/_macro-imageHelper.twig' as image  %}
#}

{# Get Image Extension #}
{%- macro getImageExtension(image = null) -%}
  {%- if image ??? null -%}
    {%- if image is iterable -%}
      {{- image.extension | lower -}}
    {%- else -%}
      {{- image | split('.') | last | lower -}}
    {%- endif -%}
  {%- endif -%}
{%- endmacro -%}



{# Check if transformable #}
{%- macro isTransformable(image = null) -%}
  {%- if image ??? null -%}
    {%- set allowedExtensions = ['png', 'jpg', 'webp'] -%}
    {%- if _self.getImageExtension(image) in allowedExtensions -%}
      {{- true -}}
    {%- else -%}
      {{- false -}}
    {%- endif -%}
  {%- endif -%}
{%- endmacro -%}



{# Render Image #}
{%- macro renderImage(image = null, transform = 'landscape', lazy = true, objectFit = null, calcDominantColor = false, simpleMarkup = false) -%}
  {# If Image exists render it #}
  {%- if image ??? null -%}
    {%- if lazy -%}
      {# Create Placeholder for Lazy Loading to prevent Layout Shift #}
      {%- set placeholder = _self.getPlaceHolder(image, transform, calcDominantColor) -%}
    {%- endif -%}
    {# Set the focalpoint from the image #}
    {%- set focalpoint = image.getFocalpoint('asCss') ??? '50% 50%' -%}
    {# Set image title for alt text #}
    {%- set imageTitle = image.title -%}
    {% if image.assetTitle %}
      {%- set imageTitle = image.assetTitle -%}
    {% endif %}
    {% if image.assetTitle and image.assetCaption %}
      {%- set imageTitle = image.assetTitle ~ ' ' ~ image.assetCaption -%}
    {% endif %}

    {# Set transformable status #}
    {% set isTransformable = _self.isTransformable(image) and not simpleMarkup %}
    {%- if isTransformable -%}
      {# Create webp image transforms #}
      {%- set srcset = _self.getSrcset(image, transform) -%}
      {# Set a root image URL and switch the src for every image when srcset is not supported (IE) #}
      {% set transformedRootImage = craft.imager.transformImage(image, transform)|last %}
    {%- endif -%}
    {%- if not isTransformable -%}
      {# Set image url #}
      {%- set imageUrl = image.getUrl() -%}
    {%- endif -%}

    <img class="{{ lazy ? 'lazyload' : '' }}"
         {% if lazy %}loading="lazy"{% endif %}
      {# Get Image Extension from the transformed source #}
         data-type="{{- _self.getSourceFileExtension(image) -}}"
      {%- if objectFit -%}
        {# Set objectfit properties #}
        style="object-fit: {{ objectFit }}; object-position: {{ focalpoint }}"
      {%- endif -%}
      {%- if lazy -%}
        {# Set placeholder if lazy true #}
        src="{{- placeholder -}}"
        {# Set data-srcset / data-src depending if image is transformable #}
        {%- if isTransformable -%}data-srcset="{{- srcset -}}"{%- else -%}data-src="{{- imageUrl -}}"{%- endif -%}
        data-sizes="auto"
      {%- else -%}
        {# Set srcset / src depending if image is transformable #}
        {%- if isTransformable -%}srcset="{{- srcset -}}"{%- else -%}src="{{- imageUrl -}}"{%- endif -%}
        sizes="100vw"
      {%- endif -%}
      {# Set image title #}
         alt="{{ imageTitle }}"
         title="{{ imageTitle }}"/>
  {%- endif -%}
{%- endmacro -%}



{# Render NoScript to send the root image to google #}
{%- macro renderNoScript(image = null) -%}
  {%- if image ??? null -%}
    <noscript><img src="{{ image.getUrl() }}" alt="{{ image.title }}"/></noscript>
  {%- endif -%}
{%- endmacro -%}



{# Get srcSet #}
{%- macro getSrcset(image = null, transform = 'landscape', format = 'webp') -%}
  {%- if image and _self.isTransformable(image) -%}
    {# Create non webp image transforms as fallback to can switch the file extensions via JS #}
    {%- set srcsetLegacy = craft.imager.srcset(craft.imager.transformImage(image, transform)) | trim -%}

    {# Return the srcset #}
    {{- craft.imager.srcset(
      craft.imager.transformImage(
        image, transform, { format: format }
      )
    ) | trim -}}
  {%- else -%}
    {{- image.url -}}
  {%- endif -%}
{%- endmacro -%}



{# Render Source #}
{%- macro renderSource(image = null, transform = 'landscape', lazy = true, mediaQuery = null, type = 'image/webp') -%}
  {# Handle Image #}
  {%- if image ??? null -%}
    {%- set srcSet = _self.getSrcset(image, transform) -%}
    {%- if srcSet ??? null -%}
      <source
        {% if image ??? null %}
          data-type="{{- _self.getSourceFileExtension(image) -}}"
        {% endif %}
        {% if lazy %}
          data-sizes="auto" data-srcset="{{- srcSet -}}"
        {% else %}
          sizes="100vw" srcset="{{- srcSet -}}"
        {% endif %}
        {% if mediaQuery %}
          media="{{- mediaQuery -}}"
        {% endif %}
        {% if type %}
        type="{{- type -}}"
        {% endif %}/>
    {%- endif -%}
  {%- endif -%}
{%- endmacro -%}


{# Get Source File Extension #}
{%- macro getSourceFileExtension(image) -%}
  {%- if image and _self.isTransformable(image) -%}
    {%- set transformedImage = craft.imager.transformImage(image, 'dominantColor') -%}
    {{- transformedImage[0].source.extension | lower -}}
  {%- else -%}
    {{- image.extension | lower -}}
  {%- endif -%}
{%- endmacro -%}



{# Get Dominant Color #}
{%- macro getDominantColor(image, calcDominantColor = false) -%}
  {%- set dominantColor = 'transparent' -%}
  {%- if craft.app.config.general.custom.dominantColor -%}
    {%- set dominantColor = craft.app.config.general.custom.dominantColor -%}
  {%- endif -%}
  {% if image ??? null %}
    {% if calcDominantColor and not craft.app.config.general.custom.localDevPerformance and image.extension | lower != 'png' and _self.isTransformable(image) %}
      {# Create Mini Image for Dominant Color #}
      {%- set image = craft.imager.transformImage(image, 'dominantColor')|first -%}
      {%- set dominantColor = craft.imager.getDominantColor(image) -%}
    {% endif %}
  {% endif %}
  {{- dominantColor -}}
{%- endmacro -%}



{# Get Placeholder #}
{%- macro getPlaceHolder(image, transform = 'landscape', calcDominantColor = false) -%}
  {%- if image ??? null -%}
    {%- if _self.isTransformable(image) -%}
      {%- set transformedImage = craft.imager.transformImage(image, transform)|first -%}
      {{- craft.imager.placeholder({
        color: _self.getDominantColor(transformedImage, calcDominantColor),
        width: transformedImage.width,
        height: transformedImage.height
      }) -}}
    {%- else -%}
      {{- craft.imager.placeholder({
        color: 'transparent',
        width: image.width,
        height: image.height,
      }) -}}
    {%- endif -%}
  {%- endif -%}
{%- endmacro -%}
