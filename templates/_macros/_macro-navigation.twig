{#
{% import '_macros/_macro-navigation.twig' as macroNavigation  %}
{{ macroNavigation.navigation(nodes) }}
#}

{% macro navigation(nodes, name = 'c-navigation', activeNode = null) %}
  {# >>> Comp Settings #}
  {% set compDefaults = {
    settings: {
      name: name,
    },
    data: {
      nodes: nodes ??? null,
    },
    classes: {
      ul: name ~ '__list',
      li: name ~ '__listItem',
      span: name ~ '__listHeading',
      link: name ~ '__listLink',
      subItemsHolder: name ~ '__subItemsWrapper',
    }
  } %}

  {# >>> Merge settings / data / classes #}
  {% set props = {
    settings: settings is defined and settings is iterable ? compDefaults.settings | merge(settings) : compDefaults.settings,
    data: data is defined and data is iterable ? compDefaults.data | merge(data) : compDefaults.data,
    classes: classes is defined and classes is iterable ? compDefaults.classes | merge(classes) : compDefaults.classes,
  } %}


  <ul x-data="{
        activeId: {{ activeNode ? activeNode.id : 0 }},
        activeParentId: {{ activeNode.parent ? activeNode.parent.id : 0 }}
      }"
      class="alpinejs {{ props.classes.ul }}  {{ props.classes.ul ~ '--level-1' }}">
    {% nav node in props.data.nodes %}
      {% set level = node.level %}
      <li class="{{ props.classes.li }} {{ props.classes.li ~'--level-' ~ level }} {{ node.classes ??? '' }}">
        {% if not node.url %}
          <span class="{{ props.classes.span }}  {{ props.classes.span ~ '--level-' ~ level }}"

            {# >>> Render custom attributes #}
            {% for attribute in node.customAttributes %}
              {{ attribute.attribute }}="{{ attribute.value }}"
            {% endfor %}>
            {{- node.title -}}
          </span>
        {% else %}
          {% if node.hasDescendants %}
            <button :class="{'is-active': activeId === {{ node.id }} || activeParentId === {{ node.id }}}"
                    @click="activeId = {{ node.id }}, activeParentId = {{ node.parent ? node.parent.id : 0 }};"
                    aria-haspopup="true"
                    :aria-expanded="[activeId === {{ node.id }} ? 'true' : 'false']"
            {% else %}
            <a href="{{ node.url }}"
               :class="{'is-active': activeId === {{ node.id }}}"
               @click="activeId = {{ node.id }}, activeParentId = {{ node.parent ? node.parent.id : 0 }};"
          {% endif %}
             class="{{ props.classes.link }}" data-current-level="{{ level }}"

             {# >>> Render aria #}
             {% if node.hasDescendants %}
               aria-haspopup="true"
               aria-expanded="false"
             {% endif %}

             {# >>> Render link target #}
             {% if node.newWindow %}
               target="_blank"
               rel="noopener"
             {% endif %}

             {# >>> Render custom attributes #}
             {% for attribute in node.customAttributes %}
               {{ attribute.attribute }}="{{ attribute.value }}"
             {% endfor %}>
            {{- node.title -}}
          {% if node.hasDescendants %}
            </button>
            {% else %}
            </a>
          {% endif %}
        {% endif %}

        {# >>> Render subitems #}
        {% if node.hasDescendants %}
        <div class="{{ props.classes.subItemsHolder }}"
             data-current-level="{{ level + 1 }}">
          {% endif %}
          {% ifchildren %}
            {% set level = node.level + 1 %}

            <ul class="{{ props.classes.ul }}"
                data-current-level="{{ level }}">
              {% children %}
            </ul>
          {% endifchildren %}
          {% if node.hasDescendants %}
        </div>
        {% endif %}
      </li>
    {% endnav %}
  </ul>
{% endmacro %}
